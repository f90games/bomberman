// Generated by CoffeeScript 1.8.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  BM.Observer = (function() {
    function Observer() {
      this.subscribers = {
        any: []
      };
    }

    Observer.prototype.on = function(type, fn) {
      type = type || 'any';
      if (typeof this.subscribers[type] === "undefined") {
        this.subscribers[type] = [];
      }
      return this.subscribers[type].push(fn);
    };

    Observer.prototype.off = function(type, fn) {
      return this.visitSubscribers('unsubscribe', fn, type);
    };

    Observer.prototype.trigger = function(type, publication) {
      var args;
      args = Array.prototype.slice.call(arguments, 1);
      return this.__visitSubscribers('publish', args, type);
    };

    Observer.prototype.__visitSubscribers = function(action, arg, type) {
      var i, max, pubtype, subscribers, _i, _results;
      pubtype = type || 'any';
      subscribers = this.subscribers[pubtype];
      max = subscribers ? subscribers.length : 0;
      _results = [];
      for (i = _i = 0; 0 <= max ? _i < max : _i > max; i = 0 <= max ? ++_i : --_i) {
        if (action === 'publish') {
          _results.push(subscribers[i].apply(null, arg));
        } else if (subscribers[i] === arg) {
          _results.push(subscribers.splice(i, 1));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    return Observer;

  })();

  BM.Connector = (function(_super) {
    __extends(Connector, _super);

    function Connector(options) {
      Connector.__super__.constructor.call(this);
      options = options || {};
      this.server = options.server || "ws://82.146.47.155:9001";
      this.connect();
    }

    Connector.prototype.connect = function() {
      var e;
      try {
        if (typeof MozWebSocket !== "undefined") {
          this.socket = new MozWebSocket(this.server + (location.hash ? '?room=' + location.hash.slice(1) : ''));
        } else if (typeof WebSocket !== "undefined") {
          this.socket = new WebSocket(this.server + (location.hash ? '?room=' + location.hash.slice(1) : ''));
        } else {
          alert("Your browser does not support websockets. We recommend that you use an up-to-date version of Google Chrome or Mozilla Firefox.");
        }
      } catch (_error) {
        e = _error;
        alert(e.message);
        return;
      }
      if (this.socket) {
        return this.bindHandlers();
      }
    };

    Connector.prototype.bindHandlers = function() {
      this.socket.onerror = _.bind(this.onError, this);
      this.socket.onopen = _.bind(this.onOpen, this);
      this.socket.onclose = _.bind(this.onClose, this);
      return this.socket.onmessage = _.bind(this.onMessage, this);
    };

    Connector.prototype.onError = function(err) {
      return console.log(err);
    };

    Connector.prototype.onOpen = function(p) {
      return this.trigger('connected');
    };

    Connector.prototype.onClose = function(p) {
      return this.trigger('closed');
    };

    Connector.prototype.onMessage = function(params) {
      var message;
      message = JSON.parse(params.data);
      console.log(message);
      return this.trigger(message.type, message.data);
    };

    return Connector;

  })(BM.Observer);

}).call(this);
