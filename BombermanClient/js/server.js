// Generated by CoffeeScript 1.8.0
(function() {
  var Game, WebSocketServer, connections, handleClientClosure, handleClientMessage, http, httpServer, maxConnections, port, rooms, server, sys, _,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  require('nodetime').profile({
    accountKey: '25e93db5dd4d53be9bd4e8fff5ffe190f19613e3',
    appName: 'Bomberman server'
  });

  sys = require("sys");

  http = require("http");

  WebSocketServer = require("websocket").server;

  _ = require('underscore');

  Game = require("./game.server");

  maxConnections = 1000;

  connections = {};

  rooms = {};

  port = 9001;

  httpServer = http.createServer(function(req, res) {
    res.writeHead(200, {
      "Content-Type": "text/plain"
    });
    return res.end();
  });

  httpServer.listen(port, function() {
    return sys.log("Listening for connections on port " + port);
  });

  server = new WebSocketServer({
    httpServer: httpServer,
    closeTimeout: 2000
  });

  server.on("request", function(req) {
    var connection, hero, query, room, _ref;
    if (_.size(connections) >= maxConnections) {
      req.reject();
      return;
    }
    connection = req.accept(null, req.origin);
    connection.IP = req.remoteAddress;
    query = req.resourceURL.query;
    if (!query.room) {
      room = _.size(rooms) + 1;
      rooms[room] = {
        count: 1,
        starter: connection
      };
      connection.room = room;
      connection.heroIndex = 0;
      return connection.sendUTF(JSON.stringify({
        type: 'newRoom',
        room: room
      }));
    } else if (rooms[query.room]) {
      if (rooms[query.room].count >= 2) {
        connection.sendUTF(JSON.stringify({
          error: true,
          message: 'The room is buisy!'
        }));
      } else {
        rooms[query.room].count = 2;
        rooms[query.room].starter.peer = connection;
        connection.room = query.room;
        connection.heroIndex = 1;
        connection.peer = rooms[query.room].starter;
        rooms[query.room].BM = Game.getNewGameSpace();
        Game.setupCurrentLevel(rooms[query.room].BM);
        hero = Game.addNewHero(rooms[query.room].BM);
        connection.sendUTF(JSON.stringify({
          type: 'newHero',
          data: rooms[query.room].BM.heros[0]
        }));
        connection.peer.sendUTF(JSON.stringify({
          type: 'newHero',
          data: hero
        }));
        while ((_ref = connection.id, __indexOf.call(connections, _ref) >= 0)) {
          connection.id = Math.floor(Math.random() * 100000);
        }
        connections[connection.id] = connection;
        connection.on("message", function(msg) {
          if (msg.type === "utf8") {
            return handleClientMessage(connection.id, msg.utf8Data);
          }
        });
        connection.on("close", function() {
          return handleClientClosure(Connection.ID);
        });
        return sys.log("Logged in " + connection.IP + "; currently " + _.size(connections) + " users.");
      }
    }
  });

  handleClientClosure = function(id) {
    var conn, room;
    if (__indexOf.call(connections, id) >= 0) {
      conn = Connections[id];
      room = rooms[conn.room];
      sys.log("Disconnect from " + connections[id].IP);
      return delete connections[id];
    }
  };

  handleClientMessage = function(id, msg) {
    var bm, c, e, hero;
    if (!(__indexOf.call(connections, id) >= 0)) {
      return;
    }
    try {
      msg = JSON.parse(msg);
    } catch (_error) {
      e = _error;
      return;
    }
    if (!(__indexOf.call(msg, "type") >= 0 && __indexOf.call(msg, "data") >= 0)) {
      return;
    }
    c = connections[id];
    if (!rooms[c.room]) {
      return;
    }
    bm = rooms[c.room].BM;
    if (!bm) {
      return;
    }
    if (msg.type === "D") {
      if (!c.peer) {
        return;
      }
      bm.heros[c.heroIndex] = msg.data;
      return c.peer.sendUTF(JSON.stringify({
        data: msg.data
      }));
    } else if (msg.type === "B") {
      if (!c.peer) {
        return;
      }
      return c.peer.sendUTF(JSON.stringify({
        type: 'newB',
        b: Message.Data
      }));
    } else if (msg.type === "RESET") {
      Game.resetGame(bm, msg.data.level);
      if (c.peer) {
        c.peer.sendUTF(JSON.stringify({
          type: 'reset',
          data: {
            level: msg.data.level
          }
        }));
        hero = Game.addNewHero(bm);
        c.sendUTF(JSON.stringify({
          type: 'newHero',
          data: bm.heros[c.peer.heroIndex]
        }));
        return c.peer.sendUTF(JSON.stringify({
          type: 'newHero',
          data: bm.heros[c.heroIndex]
        }));
      }
    }
  };

}).call(this);
